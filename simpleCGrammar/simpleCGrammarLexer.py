# Generated from simpleCGrammar.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,372,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
        1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,17,1,18,3,18,173,8,18,1,18,4,18,176,8,18,11,
        18,12,18,177,1,19,3,19,181,8,19,1,19,4,19,184,8,19,11,19,12,19,185,
        1,19,1,19,4,19,190,8,19,11,19,12,19,191,3,19,194,8,19,1,20,1,20,
        1,20,1,20,3,20,200,8,20,1,20,1,20,1,21,1,21,5,21,206,8,21,10,21,
        12,21,209,9,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,3,22,222,8,22,1,23,1,23,5,23,226,8,23,10,23,12,23,229,9,23,
        1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,
        243,8,25,1,26,1,26,1,26,1,26,1,26,3,26,250,8,26,1,27,1,27,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,267,
        8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,3,28,310,8,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,
        1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
        1,38,1,38,5,38,334,8,38,10,38,12,38,337,9,38,1,38,1,38,1,39,1,39,
        1,39,1,39,5,39,345,8,39,10,39,12,39,348,9,39,1,39,1,39,1,39,1,39,
        1,39,1,40,4,40,356,8,40,11,40,12,40,357,1,40,1,40,1,41,1,41,5,41,
        364,8,41,10,41,12,41,367,9,41,1,41,1,41,3,41,371,8,41,2,207,346,
        0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,1,0,8,1,0,48,57,8,0,
        34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,2,0,39,39,
        92,92,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,4,0,37,
        37,42,43,45,45,47,47,2,0,10,10,13,13,3,0,9,10,13,13,32,32,409,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
        0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,
        0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,94,1,0,0,0,5,96,1,0,0,0,7,98,1,
        0,0,0,9,105,1,0,0,0,11,107,1,0,0,0,13,112,1,0,0,0,15,115,1,0,0,0,
        17,120,1,0,0,0,19,126,1,0,0,0,21,130,1,0,0,0,23,137,1,0,0,0,25,139,
        1,0,0,0,27,144,1,0,0,0,29,150,1,0,0,0,31,154,1,0,0,0,33,161,1,0,
        0,0,35,166,1,0,0,0,37,172,1,0,0,0,39,180,1,0,0,0,41,195,1,0,0,0,
        43,203,1,0,0,0,45,221,1,0,0,0,47,223,1,0,0,0,49,230,1,0,0,0,51,242,
        1,0,0,0,53,249,1,0,0,0,55,266,1,0,0,0,57,309,1,0,0,0,59,311,1,0,
        0,0,61,313,1,0,0,0,63,315,1,0,0,0,65,317,1,0,0,0,67,319,1,0,0,0,
        69,321,1,0,0,0,71,323,1,0,0,0,73,325,1,0,0,0,75,327,1,0,0,0,77,329,
        1,0,0,0,79,340,1,0,0,0,81,355,1,0,0,0,83,361,1,0,0,0,85,86,5,35,
        0,0,86,87,5,105,0,0,87,88,5,110,0,0,88,89,5,99,0,0,89,90,5,108,0,
        0,90,91,5,117,0,0,91,92,5,100,0,0,92,93,5,101,0,0,93,2,1,0,0,0,94,
        95,5,60,0,0,95,4,1,0,0,0,96,97,5,62,0,0,97,6,1,0,0,0,98,99,5,115,
        0,0,99,100,5,116,0,0,100,101,5,114,0,0,101,102,5,117,0,0,102,103,
        5,99,0,0,103,104,5,116,0,0,104,8,1,0,0,0,105,106,5,61,0,0,106,10,
        1,0,0,0,107,108,5,118,0,0,108,109,5,111,0,0,109,110,5,105,0,0,110,
        111,5,100,0,0,111,12,1,0,0,0,112,113,5,105,0,0,113,114,5,102,0,0,
        114,14,1,0,0,0,115,116,5,101,0,0,116,117,5,108,0,0,117,118,5,115,
        0,0,118,119,5,101,0,0,119,16,1,0,0,0,120,121,5,119,0,0,121,122,5,
        104,0,0,122,123,5,105,0,0,123,124,5,108,0,0,124,125,5,101,0,0,125,
        18,1,0,0,0,126,127,5,102,0,0,127,128,5,111,0,0,128,129,5,114,0,0,
        129,20,1,0,0,0,130,131,5,114,0,0,131,132,5,101,0,0,132,133,5,116,
        0,0,133,134,5,117,0,0,134,135,5,114,0,0,135,136,5,110,0,0,136,22,
        1,0,0,0,137,138,5,33,0,0,138,24,1,0,0,0,139,140,5,116,0,0,140,141,
        5,114,0,0,141,142,5,117,0,0,142,143,5,101,0,0,143,26,1,0,0,0,144,
        145,5,102,0,0,145,146,5,97,0,0,146,147,5,108,0,0,147,148,5,115,0,
        0,148,149,5,101,0,0,149,28,1,0,0,0,150,151,5,105,0,0,151,152,5,110,
        0,0,152,153,5,116,0,0,153,30,1,0,0,0,154,155,5,100,0,0,155,156,5,
        111,0,0,156,157,5,117,0,0,157,158,5,98,0,0,158,159,5,108,0,0,159,
        160,5,101,0,0,160,32,1,0,0,0,161,162,5,99,0,0,162,163,5,104,0,0,
        163,164,5,97,0,0,164,165,5,114,0,0,165,34,1,0,0,0,166,167,5,98,0,
        0,167,168,5,111,0,0,168,169,5,111,0,0,169,170,5,108,0,0,170,36,1,
        0,0,0,171,173,5,45,0,0,172,171,1,0,0,0,172,173,1,0,0,0,173,175,1,
        0,0,0,174,176,7,0,0,0,175,174,1,0,0,0,176,177,1,0,0,0,177,175,1,
        0,0,0,177,178,1,0,0,0,178,38,1,0,0,0,179,181,5,45,0,0,180,179,1,
        0,0,0,180,181,1,0,0,0,181,183,1,0,0,0,182,184,7,0,0,0,183,182,1,
        0,0,0,184,185,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,193,1,
        0,0,0,187,189,5,46,0,0,188,190,7,0,0,0,189,188,1,0,0,0,190,191,1,
        0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,194,1,0,0,0,193,187,1,
        0,0,0,193,194,1,0,0,0,194,40,1,0,0,0,195,199,5,39,0,0,196,197,5,
        92,0,0,197,200,7,1,0,0,198,200,8,2,0,0,199,196,1,0,0,0,199,198,1,
        0,0,0,200,201,1,0,0,0,201,202,5,39,0,0,202,42,1,0,0,0,203,207,5,
        34,0,0,204,206,9,0,0,0,205,204,1,0,0,0,206,209,1,0,0,0,207,208,1,
        0,0,0,207,205,1,0,0,0,208,210,1,0,0,0,209,207,1,0,0,0,210,211,5,
        34,0,0,211,44,1,0,0,0,212,213,5,116,0,0,213,214,5,114,0,0,214,215,
        5,117,0,0,215,222,5,101,0,0,216,217,5,102,0,0,217,218,5,97,0,0,218,
        219,5,108,0,0,219,220,5,115,0,0,220,222,5,101,0,0,221,212,1,0,0,
        0,221,216,1,0,0,0,222,46,1,0,0,0,223,227,7,3,0,0,224,226,7,4,0,0,
        225,224,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,
        228,48,1,0,0,0,229,227,1,0,0,0,230,231,7,5,0,0,231,50,1,0,0,0,232,
        233,5,61,0,0,233,243,5,61,0,0,234,235,5,33,0,0,235,243,5,61,0,0,
        236,243,5,60,0,0,237,238,5,60,0,0,238,243,5,61,0,0,239,243,5,62,
        0,0,240,241,5,62,0,0,241,243,5,61,0,0,242,232,1,0,0,0,242,234,1,
        0,0,0,242,236,1,0,0,0,242,237,1,0,0,0,242,239,1,0,0,0,242,240,1,
        0,0,0,243,52,1,0,0,0,244,245,5,38,0,0,245,250,5,38,0,0,246,247,5,
        124,0,0,247,250,5,124,0,0,248,250,5,33,0,0,249,244,1,0,0,0,249,246,
        1,0,0,0,249,248,1,0,0,0,250,54,1,0,0,0,251,267,5,61,0,0,252,253,
        5,43,0,0,253,267,5,61,0,0,254,255,5,45,0,0,255,267,5,61,0,0,256,
        257,5,42,0,0,257,267,5,61,0,0,258,259,5,47,0,0,259,267,5,61,0,0,
        260,261,5,37,0,0,261,267,5,61,0,0,262,263,5,60,0,0,263,267,5,60,
        0,0,264,265,5,62,0,0,265,267,5,62,0,0,266,251,1,0,0,0,266,252,1,
        0,0,0,266,254,1,0,0,0,266,256,1,0,0,0,266,258,1,0,0,0,266,260,1,
        0,0,0,266,262,1,0,0,0,266,264,1,0,0,0,267,56,1,0,0,0,268,269,5,105,
        0,0,269,310,5,102,0,0,270,271,5,101,0,0,271,272,5,108,0,0,272,273,
        5,115,0,0,273,310,5,101,0,0,274,275,5,119,0,0,275,276,5,104,0,0,
        276,277,5,105,0,0,277,278,5,108,0,0,278,310,5,101,0,0,279,280,5,
        102,0,0,280,281,5,111,0,0,281,310,5,114,0,0,282,283,5,114,0,0,283,
        284,5,101,0,0,284,285,5,116,0,0,285,286,5,117,0,0,286,287,5,114,
        0,0,287,310,5,110,0,0,288,289,5,118,0,0,289,290,5,111,0,0,290,291,
        5,105,0,0,291,310,5,100,0,0,292,293,5,105,0,0,293,294,5,110,0,0,
        294,310,5,116,0,0,295,296,5,100,0,0,296,297,5,111,0,0,297,298,5,
        117,0,0,298,299,5,98,0,0,299,300,5,108,0,0,300,310,5,101,0,0,301,
        302,5,99,0,0,302,303,5,104,0,0,303,304,5,97,0,0,304,310,5,114,0,
        0,305,306,5,98,0,0,306,307,5,111,0,0,307,308,5,111,0,0,308,310,5,
        108,0,0,309,268,1,0,0,0,309,270,1,0,0,0,309,274,1,0,0,0,309,279,
        1,0,0,0,309,282,1,0,0,0,309,288,1,0,0,0,309,292,1,0,0,0,309,295,
        1,0,0,0,309,301,1,0,0,0,309,305,1,0,0,0,310,58,1,0,0,0,311,312,5,
        40,0,0,312,60,1,0,0,0,313,314,5,41,0,0,314,62,1,0,0,0,315,316,5,
        123,0,0,316,64,1,0,0,0,317,318,5,125,0,0,318,66,1,0,0,0,319,320,
        5,91,0,0,320,68,1,0,0,0,321,322,5,93,0,0,322,70,1,0,0,0,323,324,
        5,44,0,0,324,72,1,0,0,0,325,326,5,59,0,0,326,74,1,0,0,0,327,328,
        5,58,0,0,328,76,1,0,0,0,329,330,5,47,0,0,330,331,5,47,0,0,331,335,
        1,0,0,0,332,334,8,6,0,0,333,332,1,0,0,0,334,337,1,0,0,0,335,333,
        1,0,0,0,335,336,1,0,0,0,336,338,1,0,0,0,337,335,1,0,0,0,338,339,
        6,38,0,0,339,78,1,0,0,0,340,341,5,47,0,0,341,342,5,42,0,0,342,346,
        1,0,0,0,343,345,9,0,0,0,344,343,1,0,0,0,345,348,1,0,0,0,346,347,
        1,0,0,0,346,344,1,0,0,0,347,349,1,0,0,0,348,346,1,0,0,0,349,350,
        5,42,0,0,350,351,5,47,0,0,351,352,1,0,0,0,352,353,6,39,0,0,353,80,
        1,0,0,0,354,356,7,7,0,0,355,354,1,0,0,0,356,357,1,0,0,0,357,355,
        1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,360,6,40,0,0,360,82,
        1,0,0,0,361,365,7,3,0,0,362,364,7,4,0,0,363,362,1,0,0,0,364,367,
        1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,370,1,0,0,0,367,365,
        1,0,0,0,368,369,5,46,0,0,369,371,5,104,0,0,370,368,1,0,0,0,370,371,
        1,0,0,0,371,84,1,0,0,0,20,0,172,177,180,185,191,193,199,207,221,
        227,242,249,266,309,335,346,357,365,370,1,6,0,0
    ]

class simpleCGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    Integer = 19
    Double = 20
    Char = 21
    String = 22
    Bool = 23
    Identifier = 24
    ArithmeticOperator = 25
    RelationalOperator = 26
    LogicalOperator = 27
    AssignmentOperator = 28
    Keyword = 29
    LParen = 30
    RParen = 31
    LBrace = 32
    RBrace = 33
    LBracket = 34
    RBracket = 35
    Comma = 36
    Semi = 37
    Colon = 38
    LineComment = 39
    BlockComment = 40
    WS = 41
    LibraryName = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#include'", "'<'", "'>'", "'struct'", "'='", "'void'", "'if'", 
            "'else'", "'while'", "'for'", "'return'", "'!'", "'true'", "'false'", 
            "'int'", "'double'", "'char'", "'bool'", "'('", "')'", "'{'", 
            "'}'", "'['", "']'", "','", "';'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "Integer", "Double", "Char", "String", "Bool", "Identifier", 
            "ArithmeticOperator", "RelationalOperator", "LogicalOperator", 
            "AssignmentOperator", "Keyword", "LParen", "RParen", "LBrace", 
            "RBrace", "LBracket", "RBracket", "Comma", "Semi", "Colon", 
            "LineComment", "BlockComment", "WS", "LibraryName" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "Integer", "Double", 
                  "Char", "String", "Bool", "Identifier", "ArithmeticOperator", 
                  "RelationalOperator", "LogicalOperator", "AssignmentOperator", 
                  "Keyword", "LParen", "RParen", "LBrace", "RBrace", "LBracket", 
                  "RBracket", "Comma", "Semi", "Colon", "LineComment", "BlockComment", 
                  "WS", "LibraryName" ]

    grammarFileName = "simpleCGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


